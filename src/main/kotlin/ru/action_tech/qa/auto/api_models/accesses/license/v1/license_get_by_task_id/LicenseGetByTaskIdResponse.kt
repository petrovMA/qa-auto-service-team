package ru.action_tech.qa.auto.api_models.accesses.license.v1.license_get_by_task_id

data class LicenseGetByTaskIdResponse(
    val accountId: String?,
    val actionId: String?,
    val activateOn: String?,
    val activatedContactId: String?,
    val authCode: String?,
    val bitrixId: Int?,
    val blockReason: Int?,
    val bonus: Int?,
    val bonusOrderId: String?,
    val comment: String?,
    val commentModifiedBy: String?,
    val commentModifiedOn: String?,
    val consumptionStatusModifiedOn: String?,
    val contactId: String?,
    val contractPaymentDate: String?,
    val digitalSignatureNumber: Int?,
    val extensionPartnerId: String?,
    val extensionSysUserId: String?,
    val giveUkd: Int?,
    val id: String?,
    val individualSaleApproval: Boolean?,
    val instantAccess: Boolean?,
    val isAutoActivated: Boolean?,
    val isAutoBlocked: Boolean?,
    val isAutoRegistered: Boolean?,
    val isEmailSent: Boolean?,
    val isExternalRegistration: Boolean?,
    val isPastPeriod: Boolean?,
    val isRegisteredByAnotherPartner: Boolean?,
    val isRegisteredInAp: Boolean?,
    val isRegisteredInMcfr: Boolean?,
    val isSupportPasedFromErm: Boolean?,
    val isTrackRefresh: Boolean?,
    val isUpgrade: Boolean?,
    val licBase: LicBase?,
    val licenseTypeCode: Int?,
    val loginActivated: String?,
    val managerComment: String?,
    val maxSupportCalls: Int?,
    val mcfrRkCode: Int?,
    val parentLicId: String?,
    val parentServiceActivatedOn: String?,
    val partnerAmount: Int?,
    val partnerAmountBase: Int?,
    val paymentScenarioId: String?,
    val period: Int?,
    val periodType: Int?,
    val plannedPaymentDate: String?,
    val prevSeviceExpiresOn: String?,
    val previousAccessId: String?,
    val priceLevelId: String?,
    val priceListAmount: Int?,
    val priceListAmountBase: Int?,
    val productId: String?,
    val productProgram: Int?,
    val promoCodeDiscount: Int?,
    val promoCodeDiscountBase: Int?,
    val renewalsNumber: Int?,
    val resubNumber: Int?,
    val resultSupportLicId: String?,
    val resultSupportLicModifiedBy: String?,
    val resultSupportLicModifiedOn: String?,
    val salesBizUnitId: String?,
    val salesContactId: String?,
    val salesOn: String?,
    val salesPartnerId: String?,
    val salesSubsId: String?,
    val salesSysUserId: String?,
    val schoolCollectionDocumentsId: String?,
    val schoolContractLinkCreatedOn: String?,
    val schoolDiploma: String?,
    val schoolGroupId: String?,
    val schoolNumberDeparture: String?,
    val schoolRateId: String?,
    val schoolStatement: String?,
    val schoolTestPassedOn: String?,
    val schoolTreaty: String?,
    val sendPrimaryEmailSchoolDocsDate: String?,
    val sendSecondaryEmailSchoolDocsDate: String?,
    val serviceAccessOn: String?,
    val serviceActivateOn: String?,
    val serviceExpiresOn: String?,
    val setId: String?,
    val status: Int?,
    val superSchoolInviteId: String?,
    val supportBizUnitId: String?,
    val supportPartnerId: String?,
    val supportSysUserId: String?,
    val type: Int?,
    val upgradedLicId: String?,
    val usedByAccountId: String?,
    val usedByContactId: String?,
    val userCount: Int?,
    val userTokenId: String?,
    val version: Int?,
    val versionDate: String?,
    val wasActivated: Boolean?,
    val whenResub: Int?
) {
    data class LicBase(
        val createdBy: String?,
        val createdOn: String?,
        val currencyId: String?,
        val id: String?,
        val modifiedBy: String?,
        val modifiedOn: String?,
        val ownerBusinessUnitId: String?,
        val ownerId: String?,
        val ownerType: Int?,
        val statecode: Int?,
        val statuscode: Int?
    )
}